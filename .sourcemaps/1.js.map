{"version":3,"sources":["../../src/pages/password-reset/password-reset.module.ts","../../src/validators/email.ts","../../src/pages/password-reset/password-reset.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { PasswordResetPage } from './password-reset';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PasswordResetPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(PasswordResetPage),\r\n  ],\r\n  exports: [\r\n    PasswordResetPage\r\n  ]\r\n})\r\nexport class PasswordResetPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/password-reset/password-reset.module.ts","import { FormControl } from '@angular/forms';\r\n\r\nexport class EmailValidator {\r\n  \r\n  static isValid(control: FormControl){\r\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/.test(control.value);\r\n    \r\n    if (re){\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      \"invalidEmail\": true\r\n    };\r\n    \r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, AlertController, Loading, LoadingController } from 'ionic-angular';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthProvider } from '../../providers/auth/auth';\r\nimport { EmailValidator } from '../../validators/email';\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-password-reset',\r\n  templateUrl: 'password-reset.html',\r\n})\r\nexport class PasswordResetPage {\r\n  public resetPasswordForm:FormGroup;\r\n  public loading:Loading;\r\n\r\n  constructor(public navCtrl: NavController, public alertCtrl: AlertController, \r\n    public formBuilder: FormBuilder, public authProvider: AuthProvider,\r\n    public loadingCtrl: LoadingController) {\r\n\r\n    this.resetPasswordForm = formBuilder.group({\r\n      email: ['', Validators.compose([Validators.required, EmailValidator.isValid])]\r\n    });\r\n  }\r\n\r\n  resetPassword(){\r\n    if (!this.resetPasswordForm.valid){\r\n      console.log(this.resetPasswordForm.value);\r\n    } else {\r\n      this.authProvider.resetPassword(this.resetPasswordForm.value.email)\r\n      .then((user) => {\r\n        this.loading.dismiss().then( () => {\r\n          let alert = this.alertCtrl.create({\r\n            message: \"We just sent you a reset link to your email\",\r\n            buttons: [\r\n              {\r\n                text: \"Ok\",\r\n                role: 'cancel',\r\n                handler: () => {\r\n                  this.navCtrl.pop();\r\n                }\r\n              }\r\n            ]\r\n          });\r\n          alert.present();\r\n        });\r\n      }, (error) => {\r\n        this.loading.dismiss().then( () => {\r\n          var errorMessage: string = error.message;\r\n          let errorAlert = this.alertCtrl.create({\r\n            message: errorMessage,\r\n            buttons: [{ text: \"Ok\", role: 'cancel' }]\r\n          });\r\n          errorAlert.present();\r\n        });\r\n      });\r\n\r\n      this.loading = this.loadingCtrl.create();\r\n      this.loading.present();\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/password-reset/password-reset.ts"],"sourceRoot":""}