{"version":3,"sources":["../../src/pages/password-reset/password-reset.module.ts","../../src/validators/email.ts","../../src/pages/password-reset/password-reset.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { PasswordResetPage } from './password-reset';\n\n@NgModule({\n  declarations: [\n    PasswordResetPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(PasswordResetPage),\n  ],\n  exports: [\n    PasswordResetPage\n  ]\n})\nexport class PasswordResetPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/password-reset/password-reset.module.ts","import { FormControl } from '@angular/forms';\n\nexport class EmailValidator {\n  \n  static isValid(control: FormControl){\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/.test(control.value);\n    \n    if (re){\n      return null;\n    }\n    \n    return {\n      \"invalidEmail\": true\n    };\n    \n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, AlertController, Loading, LoadingController } from 'ionic-angular';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthProvider } from '../../providers/auth/auth';\nimport { EmailValidator } from '../../validators/email';\n\n@IonicPage()\n@Component({\n  selector: 'page-password-reset',\n  templateUrl: 'password-reset.html',\n})\nexport class PasswordResetPage {\n  public resetPasswordForm:FormGroup;\n  public loading:Loading;\n\n  constructor(public navCtrl: NavController, public alertCtrl: AlertController, \n    public formBuilder: FormBuilder, public authProvider: AuthProvider,\n    public loadingCtrl: LoadingController) {\n\n    this.resetPasswordForm = formBuilder.group({\n      email: ['', Validators.compose([Validators.required, EmailValidator.isValid])]\n    });\n  }\n\n  resetPassword(){\n    if (!this.resetPasswordForm.valid){\n      console.log(this.resetPasswordForm.value);\n    } else {\n      this.authProvider.resetPassword(this.resetPasswordForm.value.email)\n      .then((user) => {\n        this.loading.dismiss().then( () => {\n          let alert = this.alertCtrl.create({\n            message: \"We just sent you a reset link to your email\",\n            buttons: [\n              {\n                text: \"Ok\",\n                role: 'cancel',\n                handler: () => {\n                  this.navCtrl.pop();\n                }\n              }\n            ]\n          });\n          alert.present();\n        });\n      }, (error) => {\n        this.loading.dismiss().then( () => {\n          var errorMessage: string = error.message;\n          let errorAlert = this.alertCtrl.create({\n            message: errorMessage,\n            buttons: [{ text: \"Ok\", role: 'cancel' }]\n          });\n          errorAlert.present();\n        });\n      });\n\n      this.loading = this.loadingCtrl.create();\n      this.loading.present();\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/password-reset/password-reset.ts"],"sourceRoot":""}